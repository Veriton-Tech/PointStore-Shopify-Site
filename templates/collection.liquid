{% comment %}
  Collection template with filters and product grid
{% endcomment %}

{%- comment -%} Handle case where collection doesn't exist {%- endcomment -%}
{%- unless collection -%}
  {%- assign collection = collections.all -%}
{%- endunless -%}

{%- assign products = collection.products -%}

<div class="collection-page">
  <!-- Collection Header -->
  <div class="collection-header">
    <div class="container">
      <div class="collection-breadcrumb">
        <a href="/">Home</a>
        <span class="breadcrumb-separator">/</span>
        <span class="breadcrumb-current">{{ collection.title }}</span>
      </div>
      
      <div class="collection-title-section">
        <h1 class="collection-title">{{ collection.title }}</h1>
        <p class="collection-description">{{ collection.description }}</p>
        <div class="collection-stats">
          <span class="product-count">{{ collection.products_count }} products</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Filters and Products -->
  <div class="collection-content">
    <div class="container">

      <div class="collection-layout">
        <!-- Filters Sidebar -->
        <aside class="filters-sidebar">
          <div class="filters-header">
            <h3 class="filters-title">Filters</h3>
            <button class="filters-clear" onclick="clearAllFilters()">Clear All</button>
          </div>
          
          <!-- Category Filter -->
          <div class="filter-group">
            <h4 class="filter-label">Category</h4>
            <div class="filter-options">
              <button class="filter-option" data-filter="category" data-value="dress">Dresses</button>
              <button class="filter-option" data-filter="category" data-value="shirt">Shirts</button>
              <button class="filter-option" data-filter="category" data-value="pants">Pants</button>
              <button class="filter-option" data-filter="category" data-value="jacket">Jackets</button>
              <button class="filter-option" data-filter="category" data-value="shoes">Shoes</button>
              <button class="filter-option" data-filter="category" data-value="accessories">Accessories</button>
            </div>
          </div>
          
          <!-- Price Filter (Range Input) -->
          <div class="filter-group">
            <h4 class="filter-label">Price Range</h4>
            <div class="filter-options">
              <label for="price-min">Min:</label>
              <input type="number" id="price-min" class="price-range-input" min="0" value="0" style="width: 6rem;">
              <label for="price-max">Max:</label>
              <input type="number" id="price-max" class="price-range-input" min="0" value="500" style="width: 6rem;">
              <button class="filter-option" id="apply-price-filter">Apply</button>
            </div>
          </div>
          
          <!-- Size Filter -->
          <div class="filter-group">
            <h4 class="filter-label">Size</h4>
            <div class="filter-options">
              <button class="filter-option" data-filter="size" data-value="xs">XS</button>
              <button class="filter-option" data-filter="size" data-value="s">S</button>
              <button class="filter-option" data-filter="size" data-value="m">M</button>
              <button class="filter-option" data-filter="size" data-value="l">L</button>
              <button class="filter-option" data-filter="size" data-value="xl">XL</button>
              <button class="filter-option" data-filter="size" data-value="xxl">XXL</button>
            </div>
          </div>
          
          <!-- Color Filter -->
          <div class="filter-group">
            <h4 class="filter-label">Color</h4>
            <div class="filter-options color-options">
              <button class="filter-option color-option" data-filter="color" data-value="black" style="background: #000;"></button>
              <button class="filter-option color-option" data-filter="color" data-value="white" style="background: #fff; border: 1px solid #ddd;"></button>
              <button class="filter-option color-option" data-filter="color" data-value="red" style="background: #ff0000;"></button>
              <button class="filter-option color-option" data-filter="color" data-value="blue" style="background: #0000ff;"></button>
              <button class="filter-option color-option" data-filter="color" data-value="green" style="background: #00ff00;"></button>
              <button class="filter-option color-option" data-filter="color" data-value="yellow" style="background: #ffff00;"></button>
              <button class="filter-option color-option" data-filter="color" data-value="pink" style="background: #ffc0cb;"></button>
              <button class="filter-option color-option" data-filter="color" data-value="purple" style="background: #800080;"></button>
            </div>
          </div>
          
         
        </aside>
        
        <!-- Products Grid -->
        <main class="products-main">
          <!-- Sort and View Options -->
          <div class="products-header">
            <div class="products-sort">
              <label for="sort-select">Sort by:</label>
              <select id="sort-select" class="sort-select">
                <option value="manual">Featured</option>
                <option value="best-selling">Best Selling</option>
                <option value="title-ascending">A-Z</option>
                <option value="title-descending">Z-A</option>
                <option value="price-ascending">Price: Low to High</option>
                <option value="price-descending">Price: High to Low</option>
                <option value="created-ascending">Oldest First</option>
                <option value="created-descending">Newest First</option>
              </select>
            </div>
            
            <div class="products-view">
              <button class="view-btn active" data-view="grid" aria-label="Grid view">
                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="3" width="7" height="7"></rect>
                  <rect x="14" y="3" width="7" height="7"></rect>
                  <rect x="14" y="14" width="7" height="7"></rect>
                  <rect x="3" y="14" width="7" height="7"></rect>
                </svg>
              </button>
              {% comment %} <button class="view-btn" data-view="list" aria-label="List view">
                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="8" y1="6" x2="21" y2="6"></line>
                  <line x1="8" y1="12" x2="21" y2="12"></line>
                  <line x1="8" y1="18" x2="21" y2="18"></line>
                  <line x1="3" y1="6" x2="3.01" y2="6"></line>
                  <line x1="3" y1="12" x2="3.01" y2="12"></line>
                  <line x1="3" y1="18" x2="3.01" y2="18"></line>
                </svg>
              </button> {% endcomment %}
            </div>

            <!-- Filters Toggle Button -->
            <button class="filters-toggle-btn">
              <span>Filters</span>
              <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
                <path d="M3 6h18M6 12h12M10 18h4" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              </svg>
            </button>

          </div>
          
          <!-- Products Grid -->
          <div class="products-grid" id="products-grid">
            {% if products.size > 0 %}
              {% for product in products %}
              <a href="{{ product.url }}">
                <div class="product-card" 
                     data-category="{{ product.type | downcase }}"
                     data-price="{{ product.price | money_without_currency | remove: '$' | times: 1 }}"
                     data-colors="{{ product.options_with_values | where: 'name', 'Color' | map: 'values' | join: ',' | downcase }}"
                     data-sizes="{{ product.options_with_values | where: 'name', 'Size' | map: 'values' | join: ',' | downcase }}"
                     data-brand="{{ product.vendor | downcase }}">
                  <div class="product-card-image">
                    <img src="{{ product.featured_image | img_url: '400x400' }}" alt="{{ product.title }}" class="product-img">
                    {% if product.compare_at_price > product.price %}
                      <div class="product-card-badge sale">Sale</div>
                    {% endif %}
                    {% if product.tags contains 'new' %}
                      <div class="product-card-badge new">New</div>
                    {% endif %}
                    <button class="product-card-wishlist" data-product-id="{{ product.id }}">
                      <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                      </svg>
                      </button>
                      </div>
                      <div class="product-card-content">
                        <h3 class="product-card-title">{{ product.title }}</h3>
                        <div class="product-card-price">
                          <span class="product-card-price-current">${{ product.price | money_without_currency }}</span>
                          {% if product.compare_at_price > product.price %}
                            <span class="product-card-price-original">${{ product.compare_at_price | money_without_currency }}</span>
                          {% endif %}
                          <div class="product-card-actions">
                              <button class="btn btn-secondary btn-sm add-to-cart-btn" 
                                      data-product-id="{{ product.id }}" 
                                      data-variant-id="{{ product.selected_or_first_available_variant.id }}">
                                <i class="fa-solid fa-cart-plus"></i>
                              </button>
                            </div>
                          </div>
                          <div class="product-card-rating">
                            <div class="product-card-stars">
                              <span>★★★★★</span>
                            </div>
                              <span class="product-card-reviews">({{ product.metafields.reviews.count | default: 0 }})</span>
                              </div>
                              {% comment %} <div class="product-card-variants">
                                {% for option in product.options_with_values %}
                                  {% if option.name == 'Color' %}
                                    <div class="product-colors">
                                      {% for value in option.values limit: 4 %}
                                        <span class="color-swatch" style="background: {{ value | downcase }};" title="{{ value }}"></span>
                                      {% endfor %}
                                    </div>
                                  {% endif %}
                                {% endfor %}
                              </div> {% endcomment %}
                            
                          </div>
                        </div>
                      </a>
                      {% endfor %}
                    
             
                        {% endif %}
                      
                    </div>
          
              <!-- Pagination -->
              {% if paginate.pages > 1 %}
                <div class="pagination">
                  {% if paginate.previous %}
                  <a href="{{ paginate.previous.url }}" class="pagination-btn">
                    <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <polyline points="15,18 9,12 15,6"></polyline>
                    </svg>
                    Previous
                    </a>
                {% endif %}
                
                <div class="pagination-numbers">
                {% for part in paginate.parts %}
                  {% if part.is_link %}
                    <a href="{{ part.url }}" class="pagination-number">{{ part.title }}</a>
                  {% else %}
                    <span class="pagination-number active">{{ part.title }}</span>
                  {% endif %}
                {% endfor %}
              </div>
              
              {% if paginate.next %}
                <a href="{{ paginate.next.url }}" class="pagination-btn">
                  Next
                  <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="9,18 15,12 9,6"></polyline>
                  </svg>
                </a>
              {% endif %}
            </div>
          {% endif %}
        </main>
      </div>
    </div>
  </div>
</div>

<style>
/* Collection Page Styles */
body {
  /* background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%); */
  position: relative;
  min-height: 100vh;
}

body::before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(circle at 20% 80%, rgba(255, 136, 0, 0.1) 0%, transparent 50%),
              radial-gradient(circle at 80% 20%, rgba(255, 102, 0, 0.1) 0%, transparent 50%);
  pointer-events: none;
  z-index: -1;
}

.collection-page {
  min-height: 100vh;
}

.collection-header {
  /* background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%); */
  padding: 4rem 0;
  border-bottom: 2px solid rgba(255, 136, 0, 0.2);
}

.collection-breadcrumb {
  margin-bottom: 2rem;
  font-size: 1.4rem;
  color: #666666;
}

.breadcrumb-separator {
  margin: 0 1rem;
  color: #ff8800;
}

.breadcrumb-current {
  color: #ff8800;
  font-weight: 600;
}

.collection-title {
  font-size: 4.8rem;
  margin-bottom: 1.6rem;
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-weight: 700;
}

.collection-description {
  font-size: 1.6rem;
  color: #666666;
  margin-bottom: 2rem;
  max-width: 60rem;
  line-height: 1.6;
}

.collection-stats {
  display: flex;
  align-items: center;
  gap: 2rem;
}

.product-count {
  font-size: 1.4rem;
  color: #ff8800;
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  border: 1px solid rgba(255, 136, 0, 0.3);
  padding: 0.8rem 1.6rem;
  border-radius: 2rem;
  font-weight: 600;
}

.collection-content {
  padding: 4rem 0;
}

.collection-layout {
  display: grid;
  grid-template-columns: 25rem 1fr;
  gap: 4rem;
}

/* Filters Sidebar */
.filters-sidebar {
  /* background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%); */
  border-radius: 1.2rem;
  padding: 2rem;
  box-shadow: 0 8px 32px rgba(255, 136, 0, 0.15), 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid rgba(255, 136, 0, 0.1);
  height: fit-content;
  position: sticky;
  top: 2rem;
}

.filters-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 3rem;
  padding-bottom: 2rem;
  border-bottom: 2px solid rgba(255, 136, 0, 0.2);
}

.filters-title {
  font-size: 1.8rem;
  margin: 0;
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-weight: 700;
}

.filters-clear {
  background: none;
  border: none;
  color: #ff8800;
  font-size: 1.4rem;
  cursor: pointer;
  text-decoration: underline;
  font-weight: 600;
  transition: color 0.3s ease;
}

.filters-clear:hover {
  color: #ff6600;
}

.filter-group {
  margin-bottom: 3rem;
}

.filter-group:last-child {
  margin-bottom: 0;
}

.filter-label {
  font-size: 1.6rem;
  font-weight: 600;
  margin-bottom: 1.6rem;
  color: #1a1a1a;
}

.filter-options {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.filter-option {
  padding: 1rem 1.6rem;
  /* background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%); */
  border: 2px solid rgba(255, 136, 0, 0.2);
  border-radius: 0.8rem;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1.4rem;
  text-align: left;
  color: #1a1a1a;
  font-weight: 500;
}

.price-range-input{
  padding: 1rem 1.6rem;
  background: white;
  border: 2px solid rgba(255, 136, 0, 0.2);
  border-radius: 0.8rem;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 1.4rem;
  text-align: left;
  color: #1a1a1a;
  width: 100% !important;
}

.price-range-input:focus {
  outline: none;
  border-color: #ff8800;
  box-shadow: 0 0 0 3px rgba(255, 136, 0, 0.1);
}

.filter-option:hover {
  background: linear-gradient(135deg, #ffffff 0%, #f5f5dc 100%);
  border-color: #ff8800;
  transform: translateY(-1px);
}

.filter-option.active {
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
  border-color: #ff8800;
  box-shadow: 0 4px 16px rgba(255, 136, 0, 0.3);
}

.color-options {
  flex-direction: row;
  flex-wrap: wrap;
}

.color-option {
  width: 3.6rem;
  height: 3.6rem;
  border-radius: 50%;
  padding: 0;
  border: 2px solid rgba(255, 136, 0, 0.3);
  position: relative;
  transition: all 0.3s ease;
}

.color-option:hover {
  transform: scale(1.1);
  border-color: #ff8800;
}

.color-option.active {
  border-color: #ff8800;
  box-shadow: 0 0 0 3px rgba(255, 136, 0, 0.3);
}

/* Products Main */
.products-main {
  min-height: 50rem;
}

.products-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 3rem;
  padding-bottom: 2rem;
  border-bottom: 2px solid rgba(255, 136, 0, 0.2);
}

.products-sort {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.products-sort label {
  font-size: 1.4rem;
  color: #1a1a1a;
  font-weight: 600;
}

.sort-select {
  padding: 0.8rem 1.2rem;
  border: 2px solid rgba(255, 136, 0, 0.2);
  border-radius: 0.8rem;
  font-size: 1.4rem;
  background: white;
  cursor: pointer;
  transition: all 0.3s ease;
  color: #1a1a1a;
}

.sort-select:focus {
  outline: none;
  border-color: #ff8800;
  box-shadow: 0 0 0 3px rgba(255, 136, 0, 0.1);
}

.products-view {
  display: flex;
  gap: 0.8rem;
}

.view-btn {
  width: 4rem;
  height: 4rem;
  border: 2px solid rgba(255, 136, 0, 0.2);
  background: white;
  border-radius: 0.8rem;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #666666;
}

.view-btn:hover {
  border-color: #ff8800;
  color: #ff8800;
  transform: translateY(-1px);
}

.view-btn.active {
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  border-color: #ff8800;
  color: white;
  box-shadow: 0 4px 16px rgba(255, 136, 0, 0.3);
}

.products-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(20rem, 1fr));
  gap: 3rem;
  margin-bottom: 4rem;
}

.products-grid.list-view {
  grid-template-columns: 1fr;
}

.products-grid.list-view .product-card {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 2rem;
}

.products-grid.list-view .product-card-image {
  width: 20rem;
  height: 20rem;
  flex-shrink: 0;
}

.products-grid.list-view .product-card-content {
  flex: 1;
}

/* Product Card Actions */
.product-card-actions {
 
  display: flex;
  gap: 1rem;
  transition: all var(--transition-fast);
}

add-to-cart-btn{
  width: 50px;
}

.add-to-cart-btn:hover{
  color: black;
}

.product-card:hover .product-card-actions {
  opacity: 1;
  transform: translateY(0);
}

.product-card-variants {
  margin-top: 1rem;
}

.product-card-price{
  justify-content: space-between !important;
  margin-bottom: 0 !important;
}

.product-card-content{
  padding: 2rem 1.6rem 0rem !important;
}

.product-colors {
  display: flex;
  gap: 0.8rem;
}

.color-swatch {
  width: 2rem;
  height: 2rem;
  border-radius: 50%;
  border: 2px solid rgba(255, 136, 0, 0.3);
  cursor: pointer;
  transition: all 0.3s ease;
}

.color-swatch:hover {
  transform: scale(1.2);
  border-color: #ff8800;
}

/* Pagination */
.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 2rem;
  margin-top: 4rem;
}

#apply-price-filter{  
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
  border: none;
  transition: all 0.3s ease;
  box-shadow: 0 2px 8px rgba(255, 136, 0, 0.3);
}

#apply-price-filter:hover{
  background: linear-gradient(135deg, #ff6600 0%, #e55100 100%);
  transform: translateY(-1px);
  box-shadow: 0 4px 16px rgba(255, 136, 0, 0.4);
}

.pagination-btn {
  display: flex;
  align-items: center;
  gap: 0.8rem;
  padding: 1.2rem 2rem;
  background: white;
  border: 2px solid rgba(255, 136, 0, 0.2);
  border-radius: 0.8rem;
  color: #1a1a1a;
  text-decoration: none;
  font-size: 1.4rem;
  transition: all 0.3s ease;
  font-weight: 500;
}

.pagination-btn:hover {
  border-color: #ff8800;
  color: #ff8800;
  transform: translateY(-1px);
}

.pagination-numbers {
  display: flex;
  gap: 0.8rem;
}

.pagination-number {
  width: 4rem;
  height: 4rem;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 2px solid rgba(255, 136, 0, 0.2);
  border-radius: 0.8rem;
  color: #1a1a1a;
  text-decoration: none;
  font-size: 1.4rem;
  transition: all 0.3s ease;
  background: white;
  font-weight: 500;
}

.pagination-number:hover {
  border-color: #ff8800;
  color: #ff8800;
  transform: translateY(-1px);
}

.pagination-number.active {
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  border-color: #ff8800;
  color: white;
  box-shadow: 0 4px 16px rgba(255, 136, 0, 0.3);
}

/* Responsive Design */
@media (max-width: 1024px) {
  .collection-layout {
    grid-template-columns: 20rem 1fr;
    gap: 3rem;
  }
  
  .products-grid {
    grid-template-columns: repeat(auto-fill, minmax(25rem, 1fr));
    gap: 2rem;
  }
}

/* ======================================================================================== */

@media (max-width: 768px) {
  .collection-header {
    padding: 3rem 0;
  }
  
  .collection-title {
    font-size: 3.6rem;
  }
  
  .collection-layout {
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  .filters-sidebar {
    position: static;
    order: 2;
  }
  
  .products-main {
    order: 1;
  }
  
  .products-header {
    flex-direction: column;
    gap: 2rem;
    align-items: flex-start;
  }
  
  .products-grid {
    grid-template-columns: repeat(auto-fill, minmax(22rem, 1fr));
  }
  
  .pagination {
    flex-wrap: wrap;
    gap: 1rem;
  }
}

@media (max-width: 480px) {
  .collection-title {
    font-size: 2.8rem;
  }
  
  .products-grid {
    grid-template-columns: 1fr;
  }
  
  .products-grid.list-view .product-card {
    flex-direction: column;
    text-align: center;
  }
  
  .products-grid.list-view .product-card-image {
    width: 100%;
    height: 25rem;
  }
}

/* Filters toggle button */
.filters-toggle-btn {
  display: none;
  align-items: center;
  gap: 0.5rem;
  padding: 1rem 1.6rem;
  background: white;
  border: 2px solid rgba(255, 136, 0, 0.2);
  border-radius: 0.8rem;
  font-size: 1.6rem;
  cursor: pointer;
  margin-bottom: 1.5rem;
  color: #ff8800;
  font-weight: 600;
  transition: all 0.3s ease;
}

.filters-toggle-btn:hover {
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
  border-color: #ff8800;
}

@media (max-width: 768px) {
  .filters-toggle-btn {
    display: flex;
  }

  .filters-sidebar {
    position: fixed;
    top: 0;
    left: -100%;
    width: 80%;
    max-width: 30rem;
    height: 100%;
    background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
    box-shadow: 0 8px 32px rgba(255, 136, 0, 0.15);
    padding: 2rem;
    transition: left 0.3s ease;
    z-index: 999;
    overflow-y: auto;
    border-right: 2px solid rgba(255, 136, 0, 0.2);
  }

  .filters-sidebar.active {
    left: 0;
  }

  /* Optional overlay */
  .filters-overlay {
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0,0,0,0.5);
    z-index: 998;
  }
  .filters-overlay.active {
    display: block;
  }
}

.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 10000;
  max-width: 400px;
  padding: 0;
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  animation: slideInRight 0.3s ease;
}
.notification-success {
  background: #10b981;
  color: white;
}
.notification-error {
  background: #ef4444;
  color: white;
}
.notification-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 15px 20px;
}
.notification-message {
  flex: 1;
  font-size: 14px;
  font-weight: 500;
}
.notification-close {
  background: none;
  border: none;
  color: inherit;
  font-size: 18px;
  cursor: pointer;
  padding: 0;
  margin-left: 15px;
  opacity: 0.8;
  transition: opacity 0.2s ease;
}
.notification-close:hover {
  opacity: 1;
}
@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0%);
    opacity: 1;
  }
}

</style>

<script>
// Collection Page Functionality
document.addEventListener('DOMContentLoaded', function() {
  // Filter functionality
  const filterOptions = document.querySelectorAll('.filter-option');
  const products = document.querySelectorAll('.product-card');
  
  // Check URL parameters for category filtering
  const urlParams = new URLSearchParams(window.location.search);
  const categoryParam = urlParams.get('category');
  
  // Auto-select category filter from URL
  if (categoryParam) {
    const categoryFilter = document.querySelector(`[data-filter="category"][data-value="${categoryParam}"]`);
    if (categoryFilter) {
      categoryFilter.classList.add('active');
    }
  }
  
  filterOptions.forEach(option => {
    option.addEventListener('click', function() {
      this.classList.toggle('active');
      
      // Update URL with category filter
      const url = new URL(window.location);
      if (this.dataset.filter === 'category' && this.classList.contains('active')) {
        url.searchParams.set('category', this.dataset.value);
      } else if (this.dataset.filter === 'category' && !this.classList.contains('active')) {
        url.searchParams.delete('category');
      }
      window.history.replaceState({}, '', url);
      
      applyFilters();
    });
  });
  
  // Price range filter logic
  const priceMinInput = document.getElementById('price-min');
  const priceMaxInput = document.getElementById('price-max');
  const applyPriceBtn = document.getElementById('apply-price-filter');

  if (applyPriceBtn) {
    applyPriceBtn.addEventListener('click', function() {
      applyFilters();
    });
  }

  function applyFilters() {
    const activeFilters = document.querySelectorAll('.filter-option.active');
    const minPrice = priceMinInput ? parseFloat(priceMinInput.value) : 0;
    const maxPrice = priceMaxInput ? parseFloat(priceMaxInput.value) : Infinity;

    products.forEach(product => {
      let shouldShow = true;

      activeFilters.forEach(filter => {
        const filterType = filter.dataset.filter;
        const filterValue = filter.dataset.value;

        if (filterType === 'category') {
          if (!product.dataset.category?.includes(filterValue)) {
            shouldShow = false;
          }
        } else if (filterType === 'color') {
          if (!product.dataset.colors?.includes(filterValue)) {
            shouldShow = false;
          }
        } else if (filterType === 'size') {
          if (!product.dataset.sizes?.includes(filterValue)) {
            shouldShow = false;
          }
        } else if (filterType === 'brand') {
          if (!product.dataset.brand?.includes(filterValue)) {
            shouldShow = false;
          }
        }
      });

      // Price range filter
      const productPrice = parseFloat(product.dataset.price);
      if (productPrice < minPrice || productPrice > maxPrice) {
        shouldShow = false;
      }

      product.style.display = shouldShow ? 'block' : 'none';
    });
  }
  
  // Clear all filters
  window.clearAllFilters = function() {
    filterOptions.forEach(option => {
      option.classList.remove('active');
    });
    products.forEach(product => {
      product.style.display = 'block';
    });
  };
  
  // View toggle
  const viewButtons = document.querySelectorAll('.view-btn');
  const productsGrid = document.getElementById('products-grid');
  
  viewButtons.forEach(button => {
    button.addEventListener('click', function() {
      viewButtons.forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      
      const view = this.dataset.view;
      if (view === 'list') {
        productsGrid.classList.add('list-view');
      } else {
        productsGrid.classList.remove('list-view');
      }
    });
  });
  
  // Sort functionality (client-side for demo)
  const sortSelect = document.getElementById('sort-select');
  if (sortSelect) {
    sortSelect.addEventListener('change', function() {
      const sortValue = this.value;
      const productCards = Array.from(products);
      let sortedCards = productCards;

      if (sortValue === 'price-ascending') {
        sortedCards = productCards.sort((a, b) => parseFloat(a.dataset.price) - parseFloat(b.dataset.price));
      } else if (sortValue === 'price-descending') {
        sortedCards = productCards.sort((a, b) => parseFloat(b.dataset.price) - parseFloat(a.dataset.price));
      } else if (sortValue === 'title-ascending') {
        sortedCards = productCards.sort((a, b) => a.querySelector('.product-card-title').textContent.localeCompare(b.querySelector('.product-card-title').textContent));
      } else if (sortValue === 'title-descending') {
        sortedCards = productCards.sort((a, b) => b.querySelector('.product-card-title').textContent.localeCompare(a.querySelector('.product-card-title').textContent));
      }
      // Add more sort logic as needed

      sortedCards.forEach(card => productsGrid.appendChild(card));
    });
  }

  // Fix Quick View button navigation
  document.querySelectorAll('.product-card-actions .btn-primary').forEach(btn => {
    btn.addEventListener('click', function(e) {
      const href = btn.getAttribute('href');
      if (href && href !== '#') {
        window.location.href = href;
      }
    });
  });
});

// Filters toggle for mobile
const filtersToggleBtn = document.querySelector('.filters-toggle-btn');
const filtersSidebar = document.querySelector('.filters-sidebar');

// Add overlay dynamically
let filtersOverlay = document.createElement('div');
filtersOverlay.classList.add('filters-overlay');
document.body.appendChild(filtersOverlay);

filtersToggleBtn.addEventListener('click', () => {
  filtersSidebar.classList.toggle('active');
  filtersOverlay.classList.toggle('active');
});

filtersOverlay.addEventListener('click', () => {
  filtersSidebar.classList.remove('active');
  filtersOverlay.classList.remove('active');
});

// Add to Cart functionality for collection page
document.addEventListener('DOMContentLoaded', function() {
  const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
  
  addToCartButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      
      const variantId = this.dataset.variantId;
      const productId = this.dataset.productId;
      
      if (!variantId) {
        // If no variant ID, redirect to product page
        window.location.href = `/products/${productId}`;
        return;
      }
      
      // Update button state
      const originalText = this.textContent;
      this.textContent = 'Adding...';
      this.disabled = true;
      
      // Create form data
      const formData = new FormData();
      formData.append('id', variantId);
      formData.append('quantity', 1);
      
      // Add to cart via AJAX
      fetch('/cart/add.js', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        // Success
        this.textContent = 'Added!';
        
        // Update cart count in header
        updateCartCount();
        
        // Show success notification
        showNotification('Product added to cart successfully!', 'success');
        
        // Reset button after 2 seconds
        setTimeout(() => {
          this.disabled = false;
          this.innerHTML = '<i class="fa-solid fa-cart-plus"></i>';
        }, 2000);
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        this.textContent = 'Error';
        
        // Show error notification
        showNotification('Failed to add product to cart. Please try again.', 'error');
        
        // Reset button after 2 seconds
        setTimeout(() => {
          this.disabled = false;
          this.textContent = originalText;
        }, 2000);
      });
    });
  });
  
  // Update cart count
  function updateCartCount() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const cartCount = document.querySelector('.cart-count');
        if (cartCount) {
          cartCount.textContent = cart.item_count;
        }
      })
      .catch(error => console.error('Error updating cart count:', error));
  }
  
  // Show notification
  function showNotification(message, type) {
    // Remove any existing notifications
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-message">${message}</span>
        <button class="notification-close">&times;</button>
      </div>
    `;
    
   
    document.body.appendChild(notification);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
      notification.remove();
    }, 5000);
    
    // Manual close
    notification.querySelector('.notification-close').addEventListener('click', () => {
      notification.remove();
    });
  }
});

</script>

<script>
// Ensure wishlist buttons on the collection page work (delegated, uses localStorage)
document.addEventListener('DOMContentLoaded', function() {
  // Seed active states from localStorage
  try {
    const stored = JSON.parse(localStorage.getItem('shopify-wishlist') || '[]');
    // stored may contain objects (preferred) or legacy strings; normalize when checking
    document.querySelectorAll('.product-card-wishlist').forEach(btn => {
      if (!btn.dataset) return;
      const pid = String(btn.dataset.productId || '');
      const exists = stored.some(item => (typeof item === 'string' ? item === pid : String(item.id) === pid));
      if (exists) btn.classList.add('active');
    });
  } catch (e) {
    console.error('Wishlist init error:', e);
  }

  // Delegated click handler for wishlist buttons
  document.body.addEventListener('click', function(e) {
    const btn = e.target.closest && e.target.closest('.product-card-wishlist');
    if (!btn) return;
    e.preventDefault();
    e.stopPropagation();

    const productId = String(btn.dataset.productId || '');
    if (!productId) return;

    let wishlist = JSON.parse(localStorage.getItem('shopify-wishlist') || '[]');
    // Find by id (handle both string and object entries)
    const existingIndex = wishlist.findIndex(item => (typeof item === 'string' ? item === productId : String(item.id) === productId));
    if (existingIndex > -1) {
      // remove
      wishlist.splice(existingIndex, 1);
      btn.classList.remove('active');
      showWishlistToast('Removed from wishlist');
    } else {
      // add - build an object similar to index.liquid's structure
      const productCard = btn.closest && btn.closest('.product-card');
      const titleFromDom = productCard ? (productCard.querySelector('.product-card-title') && productCard.querySelector('.product-card-title').textContent.trim()) : '';
      const imgEl = productCard ? productCard.querySelector('img') : null;
      const handleFromLink = productCard ? (productCard.querySelector('a[href*="/products/"]') && productCard.querySelector('a[href*="/products/"]').getAttribute('href').split('/products/')[1]) : '';
      const wishlistItem = {
        id: productId,
        title: btn.dataset.productTitle || titleFromDom || 'Product',
        handle: btn.dataset.productHandle || handleFromLink || '',
        image: imgEl ? imgEl.getAttribute('src') : '',
        addedAt: new Date().toISOString()
      };

      wishlist.push(wishlistItem);
      btn.classList.add('active');
      showWishlistToast('Added to wishlist');
    }

    localStorage.setItem('shopify-wishlist', JSON.stringify(wishlist));

    // Update header count if present
    const wishlistCount = document.querySelector('.wishlist-count');
    if (wishlistCount) wishlistCount.textContent = wishlist.length;
  });

  function showWishlistToast(message) {
    const existing = document.querySelector('.wishlist-toast');
    if (existing) existing.remove();
    const toast = document.createElement('div');
    toast.className = 'wishlist-toast';
    toast.textContent = message;
    toast.style.cssText = 'position:fixed;top:20px;right:20px;z-index:11000;padding:10px 14px;background:rgba(0,0,0,0.8);color:#fff;border-radius:8px;font-weight:600;';
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 1800);
  }
});
</script>
