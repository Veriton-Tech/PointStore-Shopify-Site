{% comment %}
  Wishlist page template
{% endcomment %}

<div class="wishlist-page">
  <div class="container">
    <!-- Page Header -->
    <div class="page-header">
      <h1 class="page-title">My Wishlist</h1>
      <p class="page-description">Save your favorite items for later</p>
    </div>

    <!-- Wishlist Content -->
    <div class="wishlist-content">
      <div class="wishlist-grid" id="wishlist-grid">
        <!-- Wishlist items will be populated by JavaScript -->
        <div class="wishlist-empty" id="wishlist-empty">
          <div class="empty-state">
            <svg class="empty-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
            </svg>
            <h3>Your wishlist is empty</h3>
            <p>Start adding items you love to your wishlist</p>
            <a href="/collections/all" class="btn btn-primary">Start Shopping</a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
/* Wishlist Page Styles */
body {
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  position: relative;
  min-height: 100vh;
}

body::before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(circle at 20% 80%, rgba(255, 136, 0, 0.1) 0%, transparent 50%),
              radial-gradient(circle at 80% 20%, rgba(255, 102, 0, 0.1) 0%, transparent 50%);
  pointer-events: none;
  z-index: -1;
}

.wishlist-page {
  min-height: 100vh;
  padding: 4rem 0;
}

.page-header {
  text-align: center;
  margin-bottom: 4rem;
}

.page-title {
  font-size: 4.8rem;
  margin-bottom: 1.6rem;
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-weight: 700;
  text-shadow: 0 2px 8px rgba(255, 136, 0, 0.2);
}

.page-description {
  font-size: 1.6rem;
  color: #666666;
  max-width: 60rem;
  margin: 0 auto;
  line-height: 1.6;
}

.wishlist-content {
  max-width: 120rem;
  margin: 0 auto;
}

.wishlist-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 3rem;
  justify-content: center;
  align-items: stretch;
}

.wishlist-item {
  flex: 1 1 28rem;
  max-width: 32rem;
  min-width: 22rem;
  margin-bottom: 2rem;
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  border-radius: 1.2rem;
  box-shadow: 0 8px 32px rgba(255, 136, 0, 0.15), 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid rgba(255, 136, 0, 0.1);
  overflow: hidden;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  display: flex;
  flex-direction: column;
}

.wishlist-item:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 40px rgba(255, 136, 0, 0.25), 0 8px 30px rgba(0, 0, 0, 0.12);
}

.wishlist-item-image {
  position: relative;
  height: 30rem;
  overflow: hidden;
}

.wishlist-item-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.wishlist-item:hover .wishlist-item-image img {
  transform: scale(1.05);
}

.wishlist-item-actions {
  position: absolute;
  top: 1rem;
  right: 1rem;
  display: flex;
  gap: 0.8rem;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.wishlist-item:hover .wishlist-item-actions {
  opacity: 1;
}

.wishlist-remove-btn {
  width: 3.6rem;
  height: 3.6rem;
  background: rgba(255, 255, 255, 0.95);
  border: 2px solid rgba(255, 136, 0, 0.3);
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  color: #ff8800;
}

.wishlist-remove-btn:hover {
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
  border-color: #ff8800;
  transform: scale(1.1);
  box-shadow: 0 4px 16px rgba(255, 136, 0, 0.3);
}

.wishlist-item-content {
  padding: 2rem;
  flex: 1;
}

.wishlist-item-title {
  font-size: 1.8rem;
  margin-bottom: 1rem;
  color: #1a1a1a;
  line-height: 1.4;
  font-weight: 600;
}

.wishlist-item-price {
  font-size: 2rem;
  font-weight: 600;
  color: #ff8800;
  margin-bottom: 1.6rem;
  text-shadow: 0 1px 3px rgba(255, 136, 0, 0.2);
}

.wishlist-item-actions-bottom {
  display: flex;
  gap: 1rem;
}

.wishlist-add-to-cart {
  flex: 1;
  padding: 1.2rem 2rem;
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
  border: none;
  border-radius: 0.8rem;
  font-size: 1.4rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 2px 8px rgba(255, 136, 0, 0.3);
}

.wishlist-add-to-cart:hover {
  background: linear-gradient(135deg, #ff6600 0%, #e55100 100%);
  transform: translateY(-1px);
  box-shadow: 0 4px 16px rgba(255, 136, 0, 0.4);
}

.wishlist-view-btn {
  padding: 1.2rem 2rem;
  background: white;
  color: #1a1a1a;
  border: 2px solid rgba(255, 136, 0, 0.3);
  border-radius: 0.8rem;
  font-size: 1.4rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
  display: inline-block;
}

.wishlist-view-btn:hover {
  border-color: #ff8800;
  color: #ff8800;
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  transform: translateY(-1px);
}

.empty-state {
  text-align: center;
  padding: 6rem 2rem;
  grid-column: 1 / -1;
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  border-radius: 1.2rem;
  box-shadow: 0 8px 32px rgba(255, 136, 0, 0.15), 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid rgba(255, 136, 0, 0.1);
}

.empty-icon {
  width: 8rem;
  height: 8rem;
  color: #ff8800;
  margin-bottom: 2rem;
  opacity: 0.7;
}

.empty-state h3 {
  font-size: 2.4rem;
  margin-bottom: 1.6rem;
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-weight: 700;
}

.empty-state p {
  font-size: 1.6rem;
  color: #666666;
  margin-bottom: 3rem;
  line-height: 1.6;
}

.empty-state .btn {
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
  border: none;
  padding: 1.5rem 3rem;
  font-size: 1.6rem;
  font-weight: 600;
  border-radius: 0.8rem;
  text-decoration: none;
  display: inline-block;
  transition: all 0.3s ease;
  box-shadow: 0 4px 16px rgba(255, 136, 0, 0.3);
}

.empty-state .btn:hover {
  background: linear-gradient(135deg, #ff6600 0%, #e55100 100%);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(255, 136, 0, 0.4);
}

/* Responsive Design */
@media (max-width: 768px) {
  .wishlist-grid {
    gap: 2rem;
  }
  .wishlist-item {
    flex: 1 1 100%;
    max-width: 100%;
    min-width: 0;
  }
}

@media (max-width: 480px) {
  .wishlist-grid {
    flex-direction: column;
    gap: 1.5rem;
  }
  .wishlist-item {
    max-width: 100%;
    min-width: 0;
  }
}
</style>

<script>
// Wishlist page functionality
document.addEventListener('DOMContentLoaded', function() {
  const wishlistGrid = document.getElementById('wishlist-grid');
  const wishlistEmpty = document.getElementById('wishlist-empty');
  
  // Get wishlist from localStorage (matching the main wishlist system)
  function getWishlist() {
    const wishlist = localStorage.getItem('shopify-wishlist');
    const parsed = wishlist ? JSON.parse(wishlist) : [];
    // Normalize legacy entries that were stored as simple IDs (strings)
    return parsed.map(item => {
      if (!item) return null;
      if (typeof item === 'string') {
        return { id: item, title: 'Product', handle: '', image: '', addedAt: new Date().toISOString() };
      }
      // Ensure required fields exist
      return Object.assign({ title: item.title || 'Product', handle: item.handle || '', image: item.image || '', addedAt: item.addedAt || new Date().toISOString() }, item);
    }).filter(Boolean);
  }
  
  function saveWishlist(wishlist) {
    localStorage.setItem('shopify-wishlist', JSON.stringify(wishlist));
  }
  
  // Show notification
  function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `wishlist-notification wishlist-notification-${type}`;
    notification.innerHTML = `
      <div class="wishlist-notification-content">
        <span class="wishlist-notification-icon">${type === 'success' ? '✓' : '✗'}</span>
        <span class="wishlist-notification-message">${message}</span>
      </div>
    `;
    
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: ${type === 'success' ? 'linear-gradient(135deg, #10b981, #059669)' : 'linear-gradient(135deg, #ff8800, #ff6600)'};
      color: white;
      padding: 15px 20px;
      border-radius: 10px;
      box-shadow: 0 10px 30px rgba(255, 136, 0, 0.3);
      z-index: 10000;
      transform: translateX(400px);
      transition: all 0.3s ease;
      font-weight: 600;
      border: 1px solid rgba(255, 255, 255, 0.2);
      backdrop-filter: blur(10px);
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.style.transform = 'translateX(0)';
    }, 100);
    
    setTimeout(() => {
      notification.style.transform = 'translateX(400px)';
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }
  
  // Load and display wishlist
  async function loadWishlist() {
    const wishlist = getWishlist();

    if (wishlist.length === 0) {
      wishlistEmpty.style.display = 'block';
      wishlistGrid.innerHTML = '';
      return;
    }

    wishlistEmpty.style.display = 'none';

    // Helper to format cents to money string (Shopify returns cents)
    function formatMoney(cents) {
      if (typeof cents !== 'number') return 'Price on request';
      return '$' + (cents / 100).toFixed(2);
    }

    // Fetch product prices for non-sample items in parallel
    const pricePromises = wishlist.map(item => {
      const isSample = item.id.toString().startsWith('sample-');
      if (isSample) return Promise.resolve({ id: item.id, formatted: '$' + (Math.floor(Math.random() * 100) + 20) + '.99' });
      if (!item.handle) return Promise.resolve({ id: item.id, formatted: 'Price on request' });

      // Fetch product JSON to read price
      return fetch(`/products/${item.handle}.js`).then(resp => {
        if (!resp.ok) throw new Error('Fetch failed');
        return resp.json();
      }).then(prod => {
        // Shopify returns price in cents as integer
        const priceCents = prod && prod.price ? prod.price : null;
        return { id: item.id, formatted: formatMoney(priceCents) };
      }).catch(() => ({ id: item.id, formatted: 'Price on request' }));
    });

    const priceResults = await Promise.all(pricePromises);
    const priceMap = {};
    priceResults.forEach(p => { priceMap[p.id] = p.formatted; });

    // Render wishlist items with fetched prices
    wishlistGrid.innerHTML = wishlist.map(item => {
      const isSample = item.id.toString().startsWith('sample-');
      const productUrl = isSample ? '/collections/all' : `/products/${item.handle || item.id}`;
      const productImage = isSample ?
        "{{ 'new-arrivals.jpeg' | asset_url }}" :
        (item.image || "{{ 'new-arrivals.jpeg' | asset_url }}");

      const priceText = priceMap[item.id] || 'Price on request';

      return `
        <div class="wishlist-item" data-product-id="${item.id}">
          <div class="wishlist-item-image">
            <img src="${productImage}" alt="${item.title}">
            <div class="wishlist-item-actions">
              <button class="wishlist-remove-btn" onclick="removeFromWishlist('${item.id}')">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </button>
            </div>
          </div>
          <div class="wishlist-item-content">
            <h3 class="wishlist-item-title">${item.title}</h3>
            <div class="wishlist-item-price">
              ${priceText}
            </div>
            <div class="wishlist-item-meta">
              <small>Added: ${new Date(item.addedAt).toLocaleDateString()}</small>
            </div>
            <div class="wishlist-item-actions-bottom">
              ${!isSample ? `
                <button class="wishlist-add-to-cart" onclick="addToCart('${item.id}', '${item.handle}')">Add to Cart</button>
              ` : `
                <button class="wishlist-add-to-cart" onclick="alert('This is a sample product')">Sample Product</button>
              `}
              <a href="${productUrl}" class="wishlist-view-btn">View Details</a>
            </div>
          </div>
        </div>
      `;
    }).join('');
  }
  
  // Remove from wishlist
  window.removeFromWishlist = function(productId) {
    let wishlist = getWishlist();
    const item = wishlist.find(item => item.id === productId);
    wishlist = wishlist.filter(item => item.id !== productId);
    saveWishlist(wishlist);
    
    // Show notification
    if (item) {
      showNotification(`${item.title} removed from wishlist`);
    }
    
    // Reload wishlist display
    loadWishlist();
    
    // Dispatch event to update other components
    window.dispatchEvent(new CustomEvent('wishlistUpdated', {
      detail: { wishlist, productId, action: 'removed' }
    }));
  };
  
  // Add to cart function
  window.addToCart = function(productId, productHandle) {
    if (!productHandle) {
      showNotification('Unable to add to cart', 'error');
      return;
    }
    
    // Get the first available variant for the product
    fetch(`/products/${productHandle}.js`)
      .then(response => response.json())
      .then(product => {
        if (product.variants && product.variants.length > 0) {
          const variantId = product.variants[0].id;
          
          // Add to cart
          return fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              items: [{
                id: variantId,
                quantity: 1
              }]
            })
          });
        } else {
          throw new Error('No variants available');
        }
      })
      .then(response => response.json())
      .then(data => {
        showNotification('Added to cart successfully!');
      })
      .catch(error => {
        console.error('Error:', error);
        showNotification('Failed to add to cart', 'error');
      });
  };
  
  // Listen for wishlist updates from other pages
  window.addEventListener('wishlistUpdated', function(event) {
    loadWishlist();
  });
  
  // Load wishlist on page load
  loadWishlist();
  
  // Update wishlist count in navigation if exists
  function updateWishlistCount() {
    const wishlist = getWishlist();
    const countElements = document.querySelectorAll('.wishlist-count');
    countElements.forEach(element => {
      element.textContent = wishlist.length;
    });
  }
  
  updateWishlistCount();
});
</script>
