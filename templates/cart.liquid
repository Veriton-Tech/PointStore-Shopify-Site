{% comment %}
  Cart template with product list and checkout
{% endcomment %}

<div class="cart-page">
  <div class="container">
    <div class="cart-header">
      <h1 class="cart-title">Shopping Cart</h1>
      <!-- cart-count removed as requested -->
    </div>

    {% if cart.item_count > 0 %}
      <div class="cart-content">
        <div class="cart-items">
          <div class="cart-items-header">
            <div class="cart-item-product">Product</div>
            <div class="cart-item-price">Price</div>
            <div class="cart-item-quantity">Quantity</div>
            <div class="cart-item-total">Total</div>
            <div class="cart-item-actions">Actions</div>
          </div>

          <form action="/cart" method="post" novalidate class="cart-form">
            <div class="cart-items-list">
              {% for item in cart.items %}
                <div class="cart-item" data-item-key="{{ item.key }}">
                  <div class="cart-item-product">
                    <div class="cart-item-image">
                      <img src="{{ item.image | img_url: '150x150' }}" alt="{{ item.title }}" class="item-img">
                    </div>
                    <div class="cart-item-details">
                      <h3 class="item-title">{{ item.product.title }}</h3>
                      {% unless item.variant.title == 'Default Title' %}
                        <p class="item-variant">{{ item.variant.title }}</p>
                      {% endunless %}
                      <div class="item-properties">
                        {% for property in item.properties %}
                          <div class="item-property">
                            <strong>{{ property.first }}:</strong> {{ property.last }}
                          </div>
                        {% endfor %}
                      </div>
                    </div>
                  </div>

                  <div class="cart-item-price">
                    <div class="item-price">
                      {% if item.original_price != item.final_price %}
                        <span class="item-price-original">${{ item.original_price | money_without_currency }}</span>
                        <span class="item-price-current">${{ item.final_price | money_without_currency }}</span>
                      {% else %}
                        <span class="item-price-current">${{ item.final_price | money_without_currency }}</span>
                      {% endif %}
                    </div>
                  </div>

                  <div class="cart-item-quantity">
                    <div class="quantity-controls">
                      <button type="button" class="quantity-btn" data-action="decrease" data-item-key="{{ item.key }}">-</button>
                      <input type="number" 
                             name="updates[{{ item.key }}]" 
                             value="{{ item.quantity }}" 
                             min="0" 
                             max="{{ item.variant.inventory_quantity | default: 999 }}" 
                             class="quantity-input"
                             data-item-key="{{ item.key }}"
                             data-stock="{{ item.variant.inventory_quantity | default: 999 }}"
                             data-variant-id="{{ item.variant.id }}">
                      <button type="button" class="quantity-btn" data-action="increase" data-item-key="{{ item.key }}">+</button>
                    </div>
                    {% if item.variant.inventory_quantity and item.variant.inventory_quantity <= 10 %}
                      <div class="stock-warning">
                        {% if item.variant.inventory_quantity <= 10 and item.variant.inventory_quantity > 3 %}
                          <span class="stock-medium">{{ item.variant.inventory_quantity }} in stock</span>
                        {% endif %}
                      </div>
                    {% endif %}
                  </div>

                  <div class="cart-item-total">
                    <span class="item-total">${{ item.final_line_price | money_without_currency }}</span>
                  </div>

                  <div class="cart-item-actions">
                    <button type="button" class="remove-item-btn" data-item-key="{{ item.key }}">
                      <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="3,6 5,6 21,6"></polyline>
                        <path d="M19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2"></path>
                      </svg>
                    </button>
                  </div>
                </div>
              {% endfor %}
            </div>

            <div class="cart-actions">
              <button type="submit" name="update" class="btn btn-secondary">Update Cart</button>
              <a href="/collections/all" class="btn btn-outline">Continue Shopping</a>
            </div>
          </form>
        </div>

        <div class="cart-summary">
          <div class="summary-card">
            <h3 class="summary-title">Order Summary</h3>
            
            <div class="summary-line">
              <span class="summary-label">Subtotal</span>
              <span class="summary-value">${{ cart.total_price | money_without_currency }}</span>
            </div>
            
            <div class="summary-line">
              <span class="summary-label">Shipping</span>
              <span class="summary-value">
                {% if cart.total_price >= 5000 %}
                  Free
                {% else %}
                  $5.99
                {% endif %}
              </span>
            </div>
            
            <div class="summary-line">
              <span class="summary-label">Tax</span>
              <span class="summary-value">Calculated at checkout</span>
            </div>
            
            <div class="summary-line total">
              <span class="summary-label">Total</span>
              <span class="summary-value">${{ cart.total_price | money_without_currency }}</span>
            </div>

            <div class="checkout-actions">
              <button type="button" class="btn btn-primary btn-lg checkout-btn">
                Proceed to Checkout
              </button>
              
              <!-- payment-methods removed per request -->
            </div>
          </div>

          <!-- Promo Code -->
          <div class="promo-section">
            <h4 class="promo-title">Promo Code</h4>
            <form class="promo-form">
              <div class="promo-input-group">
                <input type="text" placeholder="Enter promo code" class="promo-input">
                <button type="submit" class="btn btn-secondary">Apply</button>
              </div>
            </form>
          </div>

          <!-- Security Badges -->
          <div class="security-badges">
            <div class="security-badge">
              <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
              </svg>
              <span>Secure Checkout</span>
            </div>
            <div class="security-badge">
              <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M9 12l2 2 4-4"></path>
                <path d="M21 12c-1 0-3-1-3-3s2-3 3-3 3 1 3 3-2 3-3 3z"></path>
                <path d="M3 12c1 0 3-1 3-3s-2-3-3-3-3 1-3 3 2 3 3 3z"></path>
              </svg>
              <span>SSL Encrypted</span>
            </div>
          </div>
        </div>
      </div>
    {% else %}
      <!-- Empty Cart -->
      <div class="empty-cart">
        <div class="empty-cart-content">
          <div class="empty-cart-icon">
            <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="9" cy="21" r="1"></circle>
              <circle cx="20" cy="21" r="1"></circle>
              <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
            </svg>
          </div>
          <h2 class="empty-cart-title">Your cart is empty</h2>
          <p class="empty-cart-text">Looks like you haven't added anything to your cart yet.</p>
          <a href="/collections/all" class="btn btn-primary btn-lg">Start Shopping</a>
        </div>
      </div>
    {% endif %}
  </div>
</div>

<style>
/* Cart Page Styles */
body {
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  position: relative;
  min-height: 100vh;
}

body::before {
  content: '';
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(circle at 20% 80%, rgba(255, 136, 0, 0.1) 0%, transparent 50%),
              radial-gradient(circle at 80% 20%, rgba(255, 102, 0, 0.1) 0%, transparent 50%);
  pointer-events: none;
  z-index: -1;
}

.cart-page {
  padding: 4rem 0;
  min-height: 60vh;
}

.cart-header {
  display: flex;
  justify-content: center; /* center the heading horizontally */
  align-items: center;
  gap: 1rem;
  margin-bottom: 4rem;
  padding-bottom: 2rem;
  border-bottom: 2px solid rgba(255, 136, 0, 0.2);
}

.cart-title {
  font-size: 3.6rem;
  margin: 0;
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-weight: 700;
  text-shadow: 0 2px 8px rgba(255, 136, 0, 0.2);
}

.cart-count {
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
  font-size: 1.6rem;
  font-weight: 600;
  padding: 0.8rem 1.6rem;
  border-radius: 2rem;
  box-shadow: 0 4px 16px rgba(255, 136, 0, 0.3);
  animation: pulse 2s infinite;
}

.cart-content {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 4rem;
}

/* Cart Items */
.cart-items {
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  border-radius: 1.2rem;
  box-shadow: 0 8px 32px rgba(255, 136, 0, 0.15), 0 4px 20px rgba(0, 0, 0, 0.08);
  overflow: hidden;
  border: 1px solid rgba(255, 136, 0, 0.1);
}

.cart-items-header {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr 1fr 0.5fr;
  gap: 2rem;
  padding: 2rem;
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
  font-weight: 600;
  font-size: 1.4rem;
}

.cart-items-list {
  padding: 0;
}

.cart-item {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr 1fr 0.5fr;
  gap: 2rem;
  padding: 2rem;
  border-bottom: 1px solid rgba(255, 136, 0, 0.1);
  align-items: center;
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
}

.cart-item:last-child {
  border-bottom: none;
}

.cart-item:hover {
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 80%);
  box-shadow: 0 2px 8px rgba(255, 136, 0, 0.1);
}

.cart-item-product {
  display: flex;
  align-items: center;
  gap: 1.6rem;
}

.cart-item-image {
  width: 8rem;
  height: 8rem;
  border-radius: 0.8rem;
  overflow: hidden;
  flex-shrink: 0;
}

.item-img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.cart-item-details {
  flex: 1;
}

.item-title {
  font-size: 1.6rem;
  margin-bottom: 0.8rem;
  color: #1a1a1a;
  line-height: 1.4;
  font-weight: 600;
}

.item-variant {
  font-size: 1.4rem;
  color: #666666;
  margin-bottom: 0.8rem;
}

.item-properties {
  font-size: 1.2rem;
  color: #888888;
}

.item-property {
  margin-bottom: 0.4rem;
}

.cart-item-price {
  text-align: center;
}

.item-price {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.4rem;
}

.item-price-original {
  font-size: 1.2rem;
  color: #888888;
  text-decoration: line-through;
}

.item-price-current {
  font-size: 1.6rem;
  font-weight: 600;
  color: #ff8800;
}

.cart-item-quantity {
  display: flex;
  justify-content: center;
}

.quantity-controls {
  display: flex;
  align-items: center;
  border: 2px solid #ff8800;
  border-radius: 0.8rem;
  overflow: hidden;
}

.quantity-btn {
  width: 3.6rem;
  height: 3.6rem;
  border: none;
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  color: #ff8800;
  transition: all 0.3s ease;
}

.quantity-btn:hover {
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
}

.quantity-input {
  width: 6rem;
  height: 3.6rem;
  border: none;
  text-align: center;
  font-size: 1.4rem;
  font-weight: 600;
  color: #1a1a1a;
  background: white;
}

.stock-warning {
  margin-top: 0.8rem;
  text-align: center;
  font-size: 1.2rem;
  font-weight: 500;
}

.stock-low {
  color: #dc2626;
  padding: 0.4rem 0.8rem;
  background: rgba(220, 38, 38, 0.1);
  border-radius: 0.4rem;
  display: inline-block;
  border: 1px solid rgba(220, 38, 38, 0.2);
}

.stock-medium {
  color: #ff8800;
  padding: 0.4rem 0.8rem;
  background: rgba(255, 136, 0, 0.1);
  border-radius: 0.4rem;
  display: inline-block;
  border: 1px solid rgba(255, 136, 0, 0.2);
}

.quantity-error {
  margin-top: 0.8rem;
  color: #dc2626;
  font-size: 1.2rem;
  text-align: center;
  padding: 0.4rem 0.8rem;
  background: rgba(220, 38, 38, 0.1);
  border-radius: 0.4rem;
  display: none;
  border: 1px solid rgba(220, 38, 38, 0.2);
}

.cart-item-total {
  text-align: center;
  font-size: 1.6rem;
  font-weight: 600;
  color: #ff8800;
}

.cart-item-actions {
  display: flex;
  justify-content: center;
}

.remove-item-btn {
  width: 3.6rem;
  height: 3.6rem;
  border: none;
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 8px rgba(255, 136, 0, 0.3);
}

.remove-item-btn:hover {
  background: linear-gradient(135deg, #ff6600 0%, #e55100 100%);
  transform: scale(1.1);
  box-shadow: 0 4px 16px rgba(255, 136, 0, 0.4);
}

.cart-actions {
  padding: 2rem;
  border-top: 1px solid rgba(255, 136, 0, 0.2);
  display: flex;
  gap: 2rem;
  justify-content: flex-end;
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
}

/* Cart Summary */
.cart-summary {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.summary-card {
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  border-radius: 1.2rem;
  padding: 2rem;
  box-shadow: 0 8px 32px rgba(255, 136, 0, 0.15), 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid rgba(255, 136, 0, 0.1);
}

.summary-title {
  font-size: 2rem;
  margin-bottom: 2rem;
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-weight: 700;
}

.summary-line {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1.2rem 0;
  border-bottom: 1px solid rgba(255, 136, 0, 0.1);
}

.summary-line:last-child {
  border-bottom: none;
}

.summary-line.total {
  font-size: 1.8rem;
  font-weight: 700;
  color: #ff8800;
  border-top: 2px solid rgba(255, 136, 0, 0.2);
  margin-top: 1rem;
  padding-top: 1.6rem;
}

.summary-label {
  color: #666666;
  font-size: 1.4rem;
}

.summary-value {
  font-weight: 600;
  color: #1a1a1a;
  font-size: 1.4rem;
}

.summary-line.total .summary-value {
  color: #ff8800;
  font-size: 2rem;
}

.checkout-actions {
  margin-top: 2rem;
}

.checkout-btn {
  width: 100%;
  margin-bottom: 2rem;
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
  border: none;
  padding: 1.5rem 2rem;
  font-size: 1.6rem;
  font-weight: 600;
  border-radius: 0.8rem;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 16px rgba(255, 136, 0, 0.3);
}

.checkout-btn:hover {
  background: linear-gradient(135deg, #ff6600 0%, #e55100 100%);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(255, 136, 0, 0.4);
}

.payment-methods {
  text-align: center;
}

.payment-text {
  font-size: 1.2rem;
  color: #666666;
  margin-bottom: 1rem;
}

.payment-icons {
  display: flex;
  justify-content: center;
  gap: 1rem;
  flex-wrap: wrap;
}

.payment-icon {
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  border: 1px solid rgba(255, 136, 0, 0.2);
  padding: 0.8rem 1.2rem;
  border-radius: 0.4rem;
  font-size: 1.2rem;
  color: #666666;
}

.promo-section {
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  border-radius: 1.2rem;
  padding: 2rem;
  box-shadow: 0 8px 32px rgba(255, 136, 0, 0.15), 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid rgba(255, 136, 0, 0.1);
}

.promo-title {
  font-size: 1.6rem;
  margin-bottom: 1.6rem;
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-weight: 600;
}

.promo-input-group {
  display: flex;
  gap: 1rem;
}

.promo-input {
  flex: 1;
  padding: 1.2rem 1.6rem;
  border: 2px solid rgba(255, 136, 0, 0.2);
  border-radius: 0.8rem;
  font-size: 1.4rem;
  background: white;
}

.promo-input:focus {
  outline: none;
  border-color: #ff8800;
  box-shadow: 0 0 0 3px rgba(255, 136, 0, 0.1);
}

.promo-input-group .btn {
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
  border: none;
  padding: 1.2rem 2rem;
  border-radius: 0.8rem;
  font-weight: 600;
  transition: all 0.3s ease;
}

.promo-input-group .btn:hover {
  background: linear-gradient(135deg, #ff6600 0%, #e55100 100%);
  transform: translateY(-1px);
}

.security-badges {
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  border-radius: 1.2rem;
  padding: 2rem;
  box-shadow: 0 8px 32px rgba(255, 136, 0, 0.15), 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid rgba(255, 136, 0, 0.1);
}

.security-badge {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem 0;
  color: #ff8800;
  font-size: 1.4rem;
  font-weight: 500;
}

.security-badge:not(:last-child) {
  border-bottom: 1px solid rgba(255, 136, 0, 0.1);
}

.security-badge .icon {
  color: #ff8800;
}

/* Empty Cart */
.empty-cart {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 50vh;
}

.empty-cart-content {
  text-align: center;
  max-width: 40rem;
  background: linear-gradient(135deg, #f5f5dc 0%, #ffffff 100%);
  padding: 4rem 3rem;
  border-radius: 1.2rem;
  box-shadow: 0 8px 32px rgba(255, 136, 0, 0.15), 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid rgba(255, 136, 0, 0.1);
}

.empty-cart-icon {
  width: 8rem;
  height: 8rem;
  margin: 0 auto 3rem;
  color: #ff8800;
}

.empty-cart-icon .icon {
  width: 100%;
  height: 100%;
}

.empty-cart-title {
  font-size: 2.8rem;
  margin-bottom: 1.6rem;
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-weight: 700;
}

.empty-cart-text {
  font-size: 1.6rem;
  color: #666666;
  margin-bottom: 3rem;
  line-height: 1.6;
}

.empty-cart-content .btn {
  background: linear-gradient(135deg, #ff8800 0%, #ff6600 100%);
  color: white;
  border: none;
  padding: 1.5rem 3rem;
  font-size: 1.6rem;
  font-weight: 600;
  border-radius: 0.8rem;
  text-decoration: none;
  display: inline-block;
  transition: all 0.3s ease;
  box-shadow: 0 4px 16px rgba(255, 136, 0, 0.3);
}

.empty-cart-content .btn:hover {
  background: linear-gradient(135deg, #ff6600 0%, #e55100 100%);
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(255, 136, 0, 0.4);
}

/* Responsive Design */
@media (max-width: 768px) {
  .cart-content {
    grid-template-columns: 1fr;
    gap: 3rem;
  }

  .cart-items-header {
    display: none;
  }

  .cart-item {
    grid-template-columns: 1fr;
    gap: 1.6rem;
    text-align: center;
  }

  .cart-item-product {
    flex-direction: column;
    text-align: center;
  }

  .cart-actions {
    flex-direction: column;
  }

  .promo-input-group {
    flex-direction: column;
  }
}

@media (max-width: 480px) {
  .cart-title {
    font-size: 2.8rem;
  }

  .cart-header {
    flex-direction: column;
    gap: 2rem;
    align-items: center;
  }

  .cart-item-image {
    width: 6rem;
    height: 6rem;
  }

  .item-title {
    font-size: 1.4rem;
  }
}

</style>

<script>
// Cart Page Functionality
document.addEventListener('DOMContentLoaded', function() {
  // Quantity controls
  const quantityButtons = document.querySelectorAll('.quantity-btn');
  const quantityInputs = document.querySelectorAll('.quantity-input');
  
  quantityButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const action = this.dataset.action;
      const itemKey = this.dataset.itemKey;
      const input = document.querySelector(`input[data-item-key="${itemKey}"]`);
      const currentValue = parseInt(input.value) || 0;
      const maxStock = parseInt(input.dataset.stock) || 999;
      
      if (action === 'increase') {
        if (currentValue < maxStock) {
          input.value = currentValue + 1;
          updateCartItem(itemKey, currentValue + 1);
          hideQuantityError(itemKey);
        } else {
          showQuantityError(itemKey, `Maximum available quantity is ${maxStock}`);
        }
      } else if (action === 'decrease' && currentValue > 1) {
        input.value = currentValue - 1;
        updateCartItem(itemKey, currentValue - 1);
        hideQuantityError(itemKey);
      }
    });
  });
  
  // Handle quantity input changes
  quantityInputs.forEach(input => {
    input.addEventListener('change', function() {
      const itemKey = this.dataset.itemKey;
      const quantity = parseInt(this.value) || 0;
      const maxStock = parseInt(this.dataset.stock) || 999;
      
      if (quantity === 0) {
        hideQuantityError(itemKey);
        removeCartItem(itemKey);
      } else if (quantity > maxStock) {
        this.value = maxStock;
        showQuantityError(itemKey, `Maximum available quantity is ${maxStock}. Quantity adjusted.`);
        updateCartItem(itemKey, maxStock);
      } else {
        hideQuantityError(itemKey);
        updateCartItem(itemKey, quantity);
      }
    });
    
    // Also validate on input (while typing)
    input.addEventListener('input', function() {
      const quantity = parseInt(this.value) || 0;
      const maxStock = parseInt(this.dataset.stock) || 999;
      const itemKey = this.dataset.itemKey;
      
      if (quantity > maxStock) {
        showQuantityError(itemKey, `Only ${maxStock} available in stock`);
      } else {
        hideQuantityError(itemKey);
      }
    });
  });
  
  // Show quantity error
  function showQuantityError(itemKey, message) {
    const cartItem = document.querySelector(`[data-item-key="${itemKey}"]`);
    if (cartItem) {
      let errorElement = cartItem.querySelector('.quantity-error');
      
      if (!errorElement) {
        errorElement = document.createElement('div');
        errorElement.className = 'quantity-error';
        const quantityDiv = cartItem.querySelector('.cart-item-quantity');
        quantityDiv.appendChild(errorElement);
      }
      
      errorElement.textContent = message;
      errorElement.style.display = 'block';
      
      // Hide error after 3 seconds
      setTimeout(() => {
        hideQuantityError(itemKey);
      }, 3000);
    }
  }
  
  // Hide quantity error
  function hideQuantityError(itemKey) {
    const cartItem = document.querySelector(`[data-item-key="${itemKey}"]`);
    if (cartItem) {
      const errorElement = cartItem.querySelector('.quantity-error');
      if (errorElement) {
        errorElement.style.display = 'none';
      }
    }
  }
  
  // Validate stock before cart update
  function validateStock(itemKey, requestedQuantity) {
    const input = document.querySelector(`input[data-item-key="${itemKey}"]`);
    const maxStock = parseInt(input.dataset.stock) || 999;
    
    if (requestedQuantity > maxStock) {
      showQuantityError(itemKey, `Only ${maxStock} items available in stock`);
      return false;
    }
    return true;
  }
  // Remove item buttons
  const removeButtons = document.querySelectorAll('.remove-item-btn');
  
  removeButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      const itemKey = this.dataset.itemKey;
      
      if (confirm('Are you sure you want to remove this item from your cart?')) {
        removeCartItem(itemKey);
      }
    });
  });
  
  // Update individual cart item
  function updateCartItem(itemKey, quantity) {
    // Validate stock before updating
    if (!validateStock(itemKey, quantity)) {
      const input = document.querySelector(`input[data-item-key="${itemKey}"]`);
      const maxStock = parseInt(input.dataset.stock) || 999;
      input.value = Math.min(quantity, maxStock);
      return;
    }
    
    const cartItem = document.querySelector(`[data-item-key="${itemKey}"]`);
    if (cartItem) {
      cartItem.style.opacity = '0.7';
    }
    
    const updates = {};
    updates[itemKey] = quantity;
    
    fetch('/cart/update.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ updates: updates })
    })
    .then(response => response.json())
    .then(data => {
      if (cartItem) {
        cartItem.style.opacity = '1';
      }
      
      // Update cart totals and counts
      updateCartDisplay(data);
      
      // Show success notification
      showNotification('Cart updated successfully!', 'success');
    })
    .catch(error => {
      console.error('Error updating cart:', error);
      if (cartItem) {
        cartItem.style.opacity = '1';
      }
      
      // Check if it's a stock error
      if (error.message && error.message.includes('stock')) {
        const input = document.querySelector(`input[data-item-key="${itemKey}"]`);
        const currentStock = parseInt(input.dataset.stock) || 999;
        showQuantityError(itemKey, `Only ${currentStock} items available`);
        input.value = currentStock;
      } else {
        showNotification('Failed to update cart. Please try again.', 'error');
      }
    });
  }
  
  // Remove cart item completely
  function removeCartItem(itemKey) {
    const cartItem = document.querySelector(`[data-item-key="${itemKey}"]`);
    if (cartItem) {
      cartItem.style.opacity = '0.5';
      cartItem.style.transform = 'translateX(-20px)';
    }
    
    const updates = {};
    updates[itemKey] = 0;
    
    fetch('/cart/update.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ updates: updates })
    })
    .then(response => response.json())
    .then(data => {
      // Remove the item from DOM
      if (cartItem) {
        cartItem.style.transition = 'all 0.3s ease';
        cartItem.style.opacity = '0';
        cartItem.style.transform = 'translateX(-100%)';
        
        setTimeout(() => {
          cartItem.remove();
          
          // Check if cart is now empty
          if (data.item_count === 0) {
            window.location.reload();
          }
        }, 300);
      }
      
      // Update cart display
      updateCartDisplay(data);
      
      // Show success notification
      showNotification('Item removed from cart!', 'success');
    })
    .catch(error => {
      console.error('Error removing item:', error);
      if (cartItem) {
        cartItem.style.opacity = '1';
        cartItem.style.transform = 'translateX(0)';
      }
      showNotification('Failed to remove item. Please try again.', 'error');
    });
  }
  
  // Update cart display with new data
  function updateCartDisplay(cartData) {
    // Update cart count in header
    const headerCartCount = document.querySelector('.header .cart-count');
    if (headerCartCount) {
      headerCartCount.textContent = cartData.item_count;
    }
    
    // page cart count removed from DOM; no update required
    
    // Update individual item totals
    cartData.items.forEach(item => {
      const itemElement = document.querySelector(`[data-item-key="${item.key}"]`);
      if (itemElement) {
        const totalElement = itemElement.querySelector('.item-total');
        const inputElement = itemElement.querySelector('.quantity-input');
        
        if (totalElement) {
          totalElement.textContent = `$${(item.final_line_price / 100).toFixed(2)}`;
        }
        
        if (inputElement) {
          inputElement.value = item.quantity;
        }
      }
    });
    
    // Update cart subtotal and total
    const subtotalElement = document.querySelector('.summary-line:not(.total) .summary-value');
    const totalElement = document.querySelector('.summary-line.total .summary-value');
    
    if (subtotalElement) {
      subtotalElement.textContent = `$${(cartData.total_price / 100).toFixed(2)}`;
    }
    
    if (totalElement) {
      totalElement.textContent = `$${(cartData.total_price / 100).toFixed(2)}`;
    }
  }
  
  // Show notification
  function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-message">${message}</span>
        <button class="notification-close">&times;</button>
      </div>
    `;
    
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 99999;
      max-width: 400px;
      padding: 0;
      border-radius: 12px;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.25);
      animation: slideInRight 0.4s ease;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      background: ${type === 'success' ? 'linear-gradient(135deg, #10b981, #059669)' : 'linear-gradient(135deg, #ef4444, #dc2626)'};
      color: white;
    `;
    
    document.body.appendChild(notification);
    
    // Auto remove after 4 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.remove();
          }
        }, 300);
      }
    }, 4000);
    
    // Manual close
    const closeBtn = notification.querySelector('.notification-close');
    if (closeBtn) {
      closeBtn.addEventListener('click', () => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.remove();
          }
        }, 300);
      });
    }
  }
  
  // Handle cart form submission (Update Cart button)
  const cartForm = document.querySelector('.cart-form');
  if (cartForm) {
    cartForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const updates = {};
      let hasStockErrors = false;
      
      // Collect and validate all quantity updates
      for (let [key, value] of formData.entries()) {
        if (key.startsWith('updates[')) {
          const itemKey = key.match(/updates\[(.+)\]/)[1];
          const requestedQuantity = parseInt(value) || 0;
          
          // Validate stock
          const input = document.querySelector(`input[data-item-key="${itemKey}"]`);
          const maxStock = parseInt(input.dataset.stock) || 999;
          
          if (requestedQuantity > maxStock) {
            showQuantityError(itemKey, `Only ${maxStock} items available`);
            input.value = maxStock;
            updates[itemKey] = maxStock;
            hasStockErrors = true;
          } else {
            updates[itemKey] = requestedQuantity;
            hideQuantityError(itemKey);
          }
        }
      }
      
      if (hasStockErrors) {
        showNotification('Some quantities were adjusted due to stock limitations', 'error');
        return;
      }
      
      // Show loading state
      const updateBtn = this.querySelector('button[name="update"]');
      const originalText = updateBtn.textContent;
      updateBtn.textContent = 'Updating...';
      updateBtn.disabled = true;
      
      fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ updates: updates })
      })
      .then(response => response.json())
      .then(data => {
        updateCartDisplay(data);
        showNotification('Cart updated successfully!', 'success');
        
        // Remove items with 0 quantity from DOM
        Object.keys(updates).forEach(itemKey => {
          if (updates[itemKey] === 0) {
            const cartItem = document.querySelector(`[data-item-key="${itemKey}"]`);
            if (cartItem) {
              cartItem.style.transition = 'all 0.3s ease';
              cartItem.style.opacity = '0';
              cartItem.style.transform = 'translateX(-100%)';
              
              setTimeout(() => {
                cartItem.remove();
              }, 300);
            }
          }
        });
        
        // Check if cart is empty
        if (data.item_count === 0) {
          setTimeout(() => {
            window.location.reload();
          }, 500);
        }
      })
      .catch(error => {
        console.error('Error updating cart:', error);
        showNotification('Failed to update cart. Please try again.', 'error');
      })
      .finally(() => {
        updateBtn.textContent = originalText;
        updateBtn.disabled = false;
      });
    });
  }
  
  // Promo code
  const promoForm = document.querySelector('.promo-form');
  if (promoForm) {
    promoForm.addEventListener('submit', function(e) {
      e.preventDefault();
      const promoInput = this.querySelector('.promo-input');
      const promoCode = promoInput.value.trim();
      
      if (promoCode) {
        // Apply promo code logic would go here
        console.log('Applying promo code:', promoCode);
        showNotification('Promo code feature coming soon!', 'success');
        promoInput.value = '';
      }
    });
  }
  
  // Checkout button
  const checkoutBtn = document.querySelector('.checkout-btn');
  if (checkoutBtn) {
    checkoutBtn.addEventListener('click', function() {
      window.location.href = '/checkout';
    });
  }
});

// Add notification styles
const notificationStyles = `
  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  .notification .notification-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 16px 20px;
  }
  
  .notification .notification-message {
    flex: 1;
    font-size: 15px;
    font-weight: 600;
    line-height: 1.4;
  }
  
  .notification .notification-close {
    background: none;
    border: none;
    color: inherit;
    font-size: 20px;
    cursor: pointer;
    padding: 4px;
    margin-left: 15px;
    opacity: 0.8;
    transition: opacity 0.2s ease;
    border-radius: 4px;
  }
  
  .notification .notification-close:hover {
    opacity: 1;
    background: rgba(255, 255, 255, 0.1);
  }
`;

// Inject notification styles
const styleSheet = document.createElement('style');
styleSheet.textContent = notificationStyles;
document.head.appendChild(styleSheet);
</script>

